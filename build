#! /bin/bash

cv="install"

function help() {
  echo "Build FireSight (non-Windows)"
  echo 
  echo "EXAMPLES:"
  echo "  sudo ./build"
  echo
  echo "OPTIONS:"
  echo "  -h"
  echo "  --help"
  echo "     Print this help text"
  echo "  -c install"
  echo "     Install pre-built OpenCV package if available (fast, simple). This is default."
  echo "  -c make"
  echo "     Rebuild  OpenCV from latest source code (latest code, time-consuming)"
}

while getopts "c:" flag
do
  case "$flag" in
    c) cv="$OPTARG";;

    *) help ; exit 0;;
  esac
done

if [ "$SUDO_USER" == "" ]; then
  echo "This script must be run with sudo command from a non-root user"
  exit -1
fi

installPrefix=/usr

if [ `uname -o` == "Solaris" ]; then
  echo SOLARIS
  pkgin update
  crle -l /usr/local/lib -u
  ln -s -f /usr/local/bin/firesight /opt/local/bin/firesight
  installPrefix=/usr/local
  if [ "$(type -p install-sh)" == "" ]; then
    echo "++++++++++++++++++ INSTALLING INSTALL-SH ++++++++++++"
    pkgin -y install install-sh
  else
    echo INSTALL-SH OK
  fi
fi

if [ "$(type -p gcc)" == "" ]; then
  echo "++++++++++++++++++ INSTALLING GCC ++++++++++++"
  pkgin -y install scmgit-base gcc47
else
  echo GCC OK
fi

if [ "$(type -p cmake)" == "" ]; then
  echo "++++++++++++++++++ INSTALLING CMAKE ++++++++++++"
  if [ `uname -o` == "Solaris" ]; then
    pkgin -y install gmake
    pkgin -y install cmake
  else
    apt-get -y install cmake
  fi
else
  echo CMAKE OK
fi

if [ "$(type -p libtool)" == "" ]; then
  echo "++++++++++++++++++ INSTALLING LIBTOOL ++++++++++++"
  pkgin -y install libtool
else
  echo LIBTOOL OK
fi

if [ "$(type -p aclocal)" == "" ]; then
  echo "++++++++++++++++++ INSTALLING AUTOMAKE ++++++++++++"
  pkgin -y install automake
else
  echo AUTOMAKE OK
fi

if [ ! -e /usr/local/include/jansson.h ] ; then
  echo "++++++++++++++++++ INSTALLING JANNSON C LIBRARY ++++++++++++"
  if [ `uname -o` == "Solaris" ]; then
    pkgin -y install autoconf
  else 
    apt-get -y install dh-autoreconf
  fi
  sudo -u $SUDO_USER git clone git://github.com/akheron/jansson jannson
  pushd jannson
  sudo -u $SUDO_USER autoreconf -i
  sudo -u $SUDO_USER ./configure
  sudo -u $SUDO_USER cmake .
  sudo -u $SUDO_USER make 
  make install
  popd
fi

if [ -e /usr/local/lib/libopencv_core.so.3.* ]; then
  ls /usr/local/lib/libopencv_core.so.*
  echo "ERROR: FireSight does not yet work with OpenCV 3. Please use OpenCV 2.4.9 or earlier"
  exit -1
elif [ -e /usr/local/lib/libopencv_core.so ]; then
  echo "OpenCV found in /usr/local/lib:"
  ls /usr/local/lib/libopencv_core.so.*
elif [ -e /usr/lib/libopencv_core.so ]; then
  echo "OpenCV found in /usr/lib:"
  ls /usr/lib/libopencv_core.so.*
elif [ "$cv" == "install" ]; then
  echo "++++++++++++++++++ INSTALLING OPENCV C++ LIBRARIES ++++++++++++"
  if [ `uname -o` == "Solaris" ]; then
    pkgin -y install opencv
  elif [ "$(type -p apt-get)" == "" ]; then
      echo "apt-get: UNAVAILABLE"
      echo "Try this to install OpenCV:"
      echo "  sudo ./build -c make"
      exit -1
  else
    apt-get -y install libopencv-dev
  fi
else
  echo "++++++++++++++++++ BUILDING  OPENCV C++ LIBRARIES ++++++++++++"
  #if [ `uname -o` == "Solaris" ]; then
    if [ "$(type -p apt-get)" != "" ] [ `uname -o` == "Solaris" ]; then
      echo "apt-get: UNAVAILABLE"
      echo "(assuming OpenCV prerequisites are already on your system)..."
    else
      echo "apt-get: Installing openexr for libIlmImf.so.6"
      apt-get -y install openexr
      apt-get -y install libavcodec-dev
      apt-get -y install libavformat-dev
      apt-get -y install libswscale-dev
      apt-get -y install libdc1394-22
      apt-get -y install libz-dev
    fi

    if [ ! -e opencv ] ; then
      sudo -u $SUDO_USER git clone https://github.com/firepick1/opencv -b 2.4
    fi
    mkdir opencv/build
    pushd opencv/build
      sudo -u $SUDO_USER cmake \
	-D WITH_OPENEXR=OFF \
        -D CMAKE_BUILD_TYPE=DEBUG \
	-D CMAKE_INSTALL_PREFIX=/usr/local \
        ..
      sudo -u $SUDO_USER
      make install
    popd
fi

if [ -e CMakeFiles ] ; then 
  echo removing existing makefiles
  rm -rf CMakeCache.txt CMakeFiles CMakeFiles.txt target cmake_install.cmake CPackConfig.cmake CPackSourceConfig.cmake
  sudo -u $SUDO_USER mkdir target
fi


echo creating makefile
sudo -u $SUDO_USER cmake \
  -DCMAKE_INSTALL_PREFIX:PATH=$installPrefix "$@" \
  .
echo building and installing FireSight...
sudo -u $SUDO_USER make
make install
if [ $? -ne 0 ]; then
  echo "ERROR: make failed"
  exit -1
fi

echo "Installation complete: firesight"
